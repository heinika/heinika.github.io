<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>android on heinika</title>
    <link>https://heinika.github.io/categories/android/</link>
    <description>Recent content in android on heinika</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 09 May 2019 10:50:21 +0800</lastBuildDate>
    
	<atom:link href="https://heinika.github.io/categories/android/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Add aar to jcenter</title>
      <link>https://heinika.github.io/android/add_aar_to_jcenter/</link>
      <pubDate>Thu, 09 May 2019 10:50:21 +0800</pubDate>
      
      <guid>https://heinika.github.io/android/add_aar_to_jcenter/</guid>
      <description>添加 com.github.dcendents.android-maven github 地址：https://github.com/dcendents/android-maven-gradle-plugin 添加这个插件主要是为了生成 aar 文件。
 Modification to the standard Maven plugin to be compatible with android-library projects (aar).
  添加插件支持
Using the plugins DSL:  plugins { id &amp;#34;com.github.dcendents.android-maven&amp;#34; version &amp;#34;2.1&amp;#34; } Using legacy plugin application: buildscript { repositories { maven { url &amp;#34;https://plugins.gradle.org/m2/&amp;#34; } } dependencies { classpath &amp;#34;com.github.dcendents:android-maven-gradle-plugin:2.1&amp;#34; } } apply plugin: &amp;#34;com.github.dcendents.android-maven&amp;#34;  设置包名和版本 You can set the maven groupId and version in the script build.</description>
    </item>
    
    <item>
      <title>Glide</title>
      <link>https://heinika.github.io/android/glide/</link>
      <pubDate>Wed, 08 May 2019 15:32:21 +0800</pubDate>
      
      <guid>https://heinika.github.io/android/glide/</guid>
      <description>Glide Webp animate support github repo : https://github.com/roths/GlideWebpSupport
sample code:
val options = RequestOptions() .override(Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL).diskCacheStrategy(DiskCacheStrategy.NONE) // webp support val decoder = WebpResourceDecoder(this) val byteDecoder = WebpByteBufferDecoder(this) // use prepend() avoid intercept by default decoder Glide.get(this.application).registry .prepend(InputStream::class.java, WebpDrawable::class.java, decoder) .prepend(ByteBuffer::class.java, WebpDrawable::class.java, byteDecoder) Glide.with(imageView).load(&amp;#34;file:///android_asset/sticker.webp&amp;#34;) .apply(options) .transition(DrawableTransitionOptions().crossFade(200)) .into(imageView) neeed add below dependencies:
implementation &amp;#39;com.github.bumptech.glide:glide:4.9.0&amp;#39; implementation &amp;#34;com.facebook.fresco:animated-webp:1.9.0&amp;#34; implementation &amp;#39;com.facebook.soloader:soloader:0.4.0&amp;#39; implementation &amp;#39;com.facebook.fresco:animated-base-support:0.13.0&amp;#39; implementation &amp;#39;com.</description>
    </item>
    
    <item>
      <title>Zip file in assets</title>
      <link>https://heinika.github.io/android/zip_file_in_assets/</link>
      <pubDate>Wed, 08 May 2019 15:32:21 +0800</pubDate>
      
      <guid>https://heinika.github.io/android/zip_file_in_assets/</guid>
      <description>如何处理 assets 里的 zip 文件？ 通常情况下 assets 里是不会出现 zip 文件的。但总有列外&amp;hellip;
直接读取（不支持密码） 通过 JDK 自带的 ZipInputStream 进行直接读取。
val inputStream = assets.open(&amp;#34;Hello.zip&amp;#34;) val zipInputStream = ZipInputStream(inputStream) // 读取一个进入点 var zipEntry = zipInputStream.getNextEntry() while (zipEntry != null) { val name = zipEntry.getName() val sb = StringBuffer(&amp;#34;&amp;#34;) val buffer = ByteArray(1024) var count = 0 while (zipInputStream.read(buffer) &amp;gt; 0) { var str = String(buffer) str = str.trim { it &amp;lt;= &amp;#39; &amp;#39; } sb.</description>
    </item>
    
  </channel>
</rss>