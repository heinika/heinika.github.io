[{"content":"每一天清晨，我都希望用一颗好奇，开放的心，来迎接这个世界，善待每一个人。\nfun main() { print(\u0026#34;Hello World!\u0026#34;) }","href":"/","title":"Home"},{"content":"我想大自然是上天赐给人们的无限宝藏。每当看见荡漾的湖水，参天的大树，广阔的海洋，心头总会喜悦。总会想这就够了，就算只有这些也就足够了。\n","href":"/about/","title":"About"},{"content":"","href":"/android/","title":"Androids"},{"content":"","href":"/categories/","title":"Categories"},{"content":"","href":"/tags/","title":"Tags"},{"content":" 如何处理 assets 里的 zip 文件？ 通常情况下 assets 里是不会出现 zip 文件的。但总有列外\u0026hellip;\n直接读取（不支持密码） 通过 JDK 自带的 ZipInputStream 进行直接读取。\nval inputStream = assets.open(\u0026#34;Hello.zip\u0026#34;) val zipInputStream = ZipInputStream(inputStream) // 读取一个进入点 var zipEntry = zipInputStream.getNextEntry() while (zipEntry != null) { val name = zipEntry.getName() val sb = StringBuffer(\u0026#34;\u0026#34;) val buffer = ByteArray(1024) var count = 0 while (zipInputStream.read(buffer) \u0026gt; 0) { var str = String(buffer) str = str.trim { it \u0026lt;= \u0026#39; \u0026#39; } sb.append(str) } val value = sb.toString() // 定位到下一个文件入口  toast(\u0026#34;name: $name , value : value\u0026#34;) zipEntry = zipInputStream.getNextEntry() } zipInputStream.close() 通过 zip4j 进行读取（支持密码，但需要 file 文件） 地址：http://www.lingala.net/zip4j.html\n直接下载： http://central.maven.org/maven2/net/lingala/zip4j/zip4j/1.3.2/zip4j-1.3.2.jar\n依赖：\ncompile group: \u0026#39;net.lingala.zip4j\u0026#39;, name: \u0026#39;zip4j\u0026#39;, version: \u0026#39;1.3.2\u0026#39; implementation \u0026#39;net.lingala.zip4j:zip4j:1.3.2\u0026#39; 虽然很久没有更新了，但依然可以用。毕竟 zip 也是很老的东西了。\n看了下作者的博客，作者已经当爸了。难怪没有时间更新。。。\n示例地址：https://github.com/dmp/zip4j/tree/master/src/net/lingala/zip4j/examples\n//copy file to cache val file = File(cacheDir.absolutePath + File.separator + \u0026#34;Hello.zip\u0026#34;) val outputStream = FileOutputStream(file) IOUtils.copy(assets.open(\u0026#34;Hello.zip\u0026#34;), outputStream); // Initiate the ZipFile val zipFile = ZipFile(file) // If zip file is password protected then set the password if (zipFile.isEncrypted) { zipFile.setPassword(\u0026#34;123456\u0026#34;) } //Get the FileHeader of the File you want to extract from the zip file. val fileHeader = zipFile.getFileHeader(\u0026#34;Hello.txt\u0026#34;) if (fileHeader != null) { val inputStream = zipFile.getInputStream(fileHeader) val value = IOUtils.toString(inputStream, \u0026#34;UTF-8\u0026#34;) log(\u0026#34;name : ${fileHeader.fileName} , value $value\u0026#34;) toast(\u0026#34;name : ${fileHeader.fileName} , value $value\u0026#34;) } //delete file.delete() 上面的代码用到了 commons-io ：\nimplementation \u0026#39;commons-io:commons-io:2.6\u0026#39;","href":"/android/zip_file_in_assets/","title":"Zip file in assets"},{"content":"","href":"/categories/android/","title":"android"},{"content":"","href":"/tags/assets/","title":"assets"},{"content":"","href":"/tags/zip/","title":"zip"},{"content":"","href":"/tags/shell/","title":"Shell"},{"content":"","href":"/shell/","title":"Shells"},{"content":"","href":"/categories/shell/","title":"shell"},{"content":"","href":"/tags/wsl/","title":"wsl"},{"content":" linux cp 出现 cannot stat 路径后面出现 一般由于在window下编辑的文档换行符是\\r\\n,而unix下换行符为\\n。导致的问题。\nsudo apt-get install dos2unix  使用命令转换：\ndos2unix filename  ","href":"/shell/wsl_problem/","title":"wsl_problem"},{"content":"","href":"/categories/essay/","title":"Essay"},{"content":"","href":"/post/","title":"Posts"},{"content":"","href":"/tags/solitude/","title":"Solitude"},{"content":"","href":"/tags/thinking/","title":"Thinking"},{"content":"重新开始写作。\n从停止写作到现在应该有一两年了，想念写作的感觉。\n昨天婆婆猪给我发了个视频，是复旦老师陈果的一段演讲，关于孤独，我出乎意料的把这段视频听完了。想起了村上春树的一段话：\n 然而随着年龄的增长,我们逐渐认识到,这样的苦痛和创伤 在人生中其实很有必要。仔细想一想,正是跟别人多少有所不同, 人才得以确立自我,一直作为独立的存在。就我而言,便是能坚 持写小说 能在同一道风景中看到不同于他人的景致、感受到不 同于他人的东西、选择不同于他人的语句,才能不断写出属于自 己的故事来。甚至还产生了一种罕见的状况:为数绝不算少的人 把它拿在手中阅读。我就是我,不是别人,这是我的一份重要的 资产。心灵所受的伤,便是人为了这种自立性不得不支付给世界 的代价。\n我基本是如此思考,并依循着这样的思考度过人生。就结果 而言,在某种程度上,我也许是主动地追求孤绝。对于从事我 这种职业的人来说,尽管有程度上的差异,这却是无法绕道回避 的必经之路。这种孤绝之感会像不时从瓶中溢出的酸一般,在不 知不觉中腐蚀人的心灵,将之溶化。这是一把锋利的双刃剑,保 护人的心灵,也细微却不间歇地损伤心灵的内壁。这种危险,我 们大概有所体味,心知肚明。唯其如此,我才必须不断地物理性 地运动身体,有时甚至穷尽体力,来排除身体内部负荷的孤绝感。 说是刻意而为,不如说是凭着直觉行事。\n 希望每个人都可以孤独而有趣着。\n","href":"/post/solitarily/","title":"关于孤独"},{"content":"","href":"/authors/","title":"Authors"},{"content":"","href":"/tags/config/","title":"Configuration"},{"content":"","href":"/tags/og/","title":"Opengraph"},{"content":"","href":"/page/","title":"Pages"},{"content":"","href":"/search/","title":"Search"},{"content":"","href":"/search/","title":"Search"},{"content":"","href":"/series/","title":"Series"}]
